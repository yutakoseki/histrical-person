import { z } from "zod";
import { openaiClient } from "@/lib/openai";
import { env } from "@/lib/env";

const flexibleStringArray = z.preprocess(
  (value) => {
    if (typeof value === "string") {
      return value
        .split(/[\n„ÄÅ,]+/)
        .map((item) => item.trim())
        .filter(Boolean);
    }
    if (Array.isArray(value)) {
      return value.map((item) => (typeof item === "string" ? item.trim() : item)).filter(Boolean);
    }
    return value;
  },
  z.array(z.string().min(1)),
);

export const aiProposalSchema = z.object({
  name: z
    .string()
    .min(1, "name is required")
    .max(32, "name must be 32 characters or fewer"),
  youtubeTitle: z
    .string()
    .min(1, "youtubeTitle is required")
    .max(100, "youtubeTitle must be 100 characters or fewer"),
  summary: z
    .string()
    .min(1, "summary is required")
    .max(280, "summary must be 280 characters or fewer"),
  hook: z.string().optional(),
  thumbnailIdea: z.string().optional(),
  thumbnailTitle: z
    .string()
    .min(1, "thumbnailTitle is required")
    .max(24, "thumbnailTitle must be 24 characters or fewer"),
  tags: flexibleStringArray.optional(),
  sourceHints: flexibleStringArray.optional(),
  notes: z.string().optional(),
});

export type AiProposal = z.infer<typeof aiProposalSchema>;

export const aiRequestSchema = z.object({
  theme: z.string().optional(),
  era: z.string().optional(),
  focus: z.string().optional(),
  forbidNames: z.array(z.string().min(1)).optional(),
});

export type AiRequestInput = z.infer<typeof aiRequestSchema>;

const normalizeName = (value: string): string =>
  value
    .replace(/[\\s„ÄÄ„ÉªÔΩ•\\.\\-_,„ÄÅÔºå„Äå„Äç„Äé„ÄèÔºàÔºâ()ÔºªÔºΩ\\[\\]]+/g, "")
    .toLowerCase();

export async function generateFigureProposal(
  input: AiRequestInput,
): Promise<AiProposal> {
  if (!openaiClient) {
    throw new Error("OPENAI_API_KEY is not configured");
  }

  const payload = aiRequestSchema.parse(input);

  const userIntent = [
    payload.theme ? `„ÉÜ„Éº„Éû: ${payload.theme}` : null,
    payload.era ? `ÊôÇ‰ª£: ${payload.era}` : null,
    payload.focus ? `ÁÑ¶ÁÇπ: ${payload.focus}` : null,
    payload.forbidNames?.length
      ? `Èô§Â§ñ: ${payload.forbidNames.join(", ")}`
      : null,
  ]
    .filter(Boolean)
    .join("\n");

  const instruction = `
„ÅÇ„Å™„Åü„ÅØÊó•Êú¨Ë™û„ÅÆ„Éì„Ç∏„Éç„Çπ„ÉªÊïôÈ§äÁ≥ª„ÉÅ„É£„É≥„Éç„É´„ÅÆÁ∑®ÈõÜËÄÖ„Åß„Åô„ÄÇ40„Äú70‰ª£Áî∑ÊÄßË¶ñËÅ¥ËÄÖÔºàÁâπ„Å´50„Äú60‰ª£Ôºâ„Å´Âà∫„Åï„ÇãÂÅâ‰∫∫ÂÄôË£ú„ÇíÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

Ë¶Å‰ª∂:
- Êó•Êú¨‰∫∫„Å´Èôê„Çâ„Åö‰∏ñÁïå‰∏≠„ÅÆÂÅâ‰∫∫„ÇíÂØæË±°„Å®„Åô„Çã„Åì„Å®„ÄÇËøë‰ª£„ÄúÁèæ‰ª£Ôºà19„Äú20‰∏ñÁ¥Ä‰ª•ÈôçÔºâ„ÅÆÊîøÊ≤ªÂÆ∂„ÉªÂì≤Â≠¶ËÄÖ„ÉªÂ≠¶ËÄÖ„ÉªÁµåÂñ∂ËÄÖ„Å™„Å©„ÄÅÂè≤ÂÆü„Å´Âü∫„Å•„ÅèÂêçË®Ä„ÅåË±äÂØå„Å™‰∫∫Áâ©„ÇíÂÑ™ÂÖà„ÄÇ
- „Äåname„Äç„ÅØÊó•Êú¨Ë™ûË°®Ë®òÔºà„Ç´„Çø„Ç´„ÉäË°®Ë®ò„ÇÇÂèØÔºâ„ÅßÂ∫É„ÅèË™çÁü•„Åï„Çå„Åü‰∫∫Áâ©Âêç„ÄÇ
- „ÄåyoutubeTitle„Äç„ÅØ‰ª•‰∏ã„ÇíÊ∫Ä„Åü„Åô„Åì„Å®:
  * 55„Äú85ÊñáÂ≠óÁ®ãÂ∫¶
  * „Çø„Ç§„Éà„É´ÂÜíÈ†≠„ÅØÂøÖ„Åö„Äå„Äê{‰∫∫Áâ©Âêç}„Å´Â≠¶„Å∂„Äë„Äç„ÅßÂßã„ÇÅ„Çã„ÄÇ
  * ‰∏ãË®ò„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„ÇâÈÅ∏„Å∂„ÄÇÂéüÂâá„Å®„Åó„Å¶üíÄ„Éû„Ç§„Éä„Çπ„ÉªÁÖΩ„ÇäÁ≥ª„ÇíÂÑ™ÂÖà„Åó„ÄÅÂêå„Åò„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁ∂ö„Åë„Å¶‰Ωø„Çè„Å™„ÅÑ„ÄÇ
    üíÄ „Éû„Ç§„Éä„Çπ„ÉªÁÖΩ„ÇäÁ≥ª„ÉÜ„É≥„Éó„É¨„Éº„Éà:
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë„Å™„Åú„ÅÇ„Å™„Åü„ÅØ„Åæ„Å†ÊàêÂäü„Åß„Åç„Å™„ÅÑ„ÅÆ„Åã
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‚ÄúÂá°‰∫∫‚Äù„Åå„ÇÑ„Çä„Åå„Å°„Å™Ëá¥ÂëΩÁöÑ„Éü„Çπ‚óãÈÅ∏
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë„Åì„ÅÆÁøíÊÖ£„Åå‚Äú‰∫∫Áîü„ÇíÂ£ä„Åô‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂÑ™ÁßÄ„Å™‰∫∫„Åª„Å©Èô•„Çã‚ÄúÁΩ†‚Äù„Å®„ÅØ
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂä™Âäõ„Åó„Å¶„ÇÇÂ†±„Çè„Çå„Å™„ÅÑ‰∫∫„ÅÆÂÖ±ÈÄöÁÇπ
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂ§±Êïó„ÇíÁπ∞„ÇäËøî„Åô‰∫∫„ÅÆ‚ÄúÂè£Áôñ‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë„Å™„ÅúÂ§ö„Åè„ÅÆ‰∫∫„ÅØ‚ÄúÂ§¢„ÇíË´¶„ÇÅ„Çã‚Äù„ÅÆ„Åã
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë„ÅÇ„Å™„Åü„ÅÆ‰∫∫Áîü„Åå„Å§„Åæ„Çâ„Å™„ÅÑÊú¨ÂΩì„ÅÆÁêÜÁî±
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÊ∞ó„Å•„Åã„Å¨„ÅÜ„Å°„Å´‚ÄúËá™ÂàÜ„Çí„ÉÄ„É°„Å´„Åó„Å¶„ÅÑ„Çã‚ÄùÁøíÊÖ£
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‚ÄúÁµêÊûú„ÅåÂá∫„Å™„ÅÑ‰∫∫‚Äù„ÅåË¶ãËêΩ„Å®„Åó„Å¶„ÅÑ„ÇãÁúüÂÆü
    üåÖ „Éó„É©„Çπ„ÉªÂâçÂêë„ÅçÁ≥ª„ÉÜ„É≥„Éó„É¨„Éº„Éà:
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‰∫∫Áîü„ÇíÂ§â„Åà„Çã„Åü„Å£„Åü‰∏Ä„Å§„ÅÆËÄÉ„ÅàÊñπ
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÈÄÜÂ¢É„ÇíÂäõ„Å´Â§â„Åà„Çã‚ÄúÊÄùËÄÉÊ≥ï‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂ§¢„ÇíÂè∂„Åà„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å„Å™‚ÄúË¶öÊÇü‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂ∞è„Åï„Å™‰∏ÄÊ≠©„Åå‰∫∫Áîü„ÇíÂãï„Åã„Åô
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë„Å©„ÇìÂ∫ï„Åã„ÇâÁ´ã„Å°‰∏ä„Åå„Çã‚ÄúÂãáÊ∞ó‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂøÉ„ÇíËªΩ„Åè„Åô„Çã‚ÄúÁîü„ÅçÊñπ„ÅÆ„Éí„É≥„Éà‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÊàêÂäüËÄÖ„ÅåÊåÅ„Å§‚Äú„Åü„Å£„Åü‰∏Ä„Å§„ÅÆÂÖ±ÈÄöÁÇπ‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‰ªäÊó•„Åã„ÇâÂ§â„Çè„Çå„Çã‚ÄúÁøíÊÖ£„ÅÆÂäõ‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂπ∏„Åõ„ÇíÂºï„ÅçÂØÑ„Åõ„Çã‚ÄúËÄÉ„ÅàÊñπ‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„ÄëÂä™Âäõ„ÅåÂ†±„Çè„Çå„Çã‰∫∫„Å´ÂÖ±ÈÄö„Åô„Çã‚Äú‰ø°Âøµ‚Äù
    üí° ÂøúÁî®„Éë„Çø„Éº„É≥:
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‚Äú‰ªä„Åì„ÅÆÁû¨Èñì‚Äù„Åã„Çâ‰∫∫Áîü„ÅåÂ§â„Çè„ÇãË®ÄËëâ
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë„Åü„Å£„Åü‰∏ÄË®Ä„ÅßÁîü„ÅçÊñπ„ÅåÂ§â„Çè„Çã
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‚ÄúÂøÉ„Å´Âà∫„Åï„Çã‚Äù‰∫∫Áîü„ÅÆÁúüÁêÜ
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë100Âπ¥Áµå„Å£„Å¶„ÇÇËâ≤„ÅÇ„Åõ„Å™„ÅÑ‚ÄúÊïô„Åà‚Äù
      - „Äê‚óã‚óã„Å´Â≠¶„Å∂„Äë‚ÄúÊôÇ‰ª£„ÇíË∂Ö„Åà„Çã‚ÄùÊàêÂäü„ÅÆÂì≤Â≠¶
  * „ÉÜ„É≥„Éó„É¨ÂÜÖ„ÅÆ‚óã‚óã„Çí‰∫∫Áâ©Âêç„Å´ÁΩÆÊèõ„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶Êï∞Â≠ó„ÉªÂâØÈ°å„ÉªÊôÇ‰ª£ÊÑü„ÇíËøΩÂä†„Åó„Å¶„ÇÇ„Çà„ÅÑ„ÅåÁÖΩ„Çä„ÅÆ„Éã„É•„Ç¢„É≥„Çπ„ÅØÁ∂≠ÊåÅ„Åô„Çã„ÄÇ
  * „ÉÜ„É≥„Éó„É¨Êú¨Êñá„ÅÆÂæå„Çç„Å´„Äå‚îÄ‚îÄ‚óã„Å§„ÅÆ‚óØ‚óØ„Äç„Äå‚îÄ‚îÄ3„Å§„ÅÆÁúüÂÆü„Äç„Å™„Å©ÂçäËßíÊï∞Â≠óÂÖ•„Çä„ÅÆÂâØÈ°å„ÇíÂä†„Åà„ÄÅ‰∫∫Áâ©„ÅÆÈÄ∏Ë©±„ÇÑÂêçË®Ä„Å®Èñ¢ÈÄ£„Åô„ÇãÂÖ∑‰ΩìÁöÑ„Éô„Éç„Éï„Ç£„ÉÉ„Éà„ÇíÊèêÁ§∫„Åô„Çã„ÄÇ
  * ÈÅ∏„Å∂„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®‰ªï‰∏ä„Åí„ÅÆÊñáË®Ä„ÅØ„ÄÅ„Åù„ÅÆ‰∫∫Áâ©„ÅÆ‰ª£Ë°®ÁöÑ„Å™Ë®ÄËëâ„ÉªÈÄ∏Ë©±„ÉªË°åÂãï„Å®Ë´ñÁêÜÁöÑ„Å´Áµê„Å≥„Å§„Åë„Çã„ÄÇ‰∫∫Áâ©ÂÉè„Å´„Åù„Åê„Çè„Å™„ÅÑÁÖΩ„Çä„ÅØÈÅø„Åë„Çã„ÄÇ
  * Êò≠Âíå„ÉªÂπ≥Êàê„Å™„Å©„ÅÆÊôÇ‰ª£ÊÑü„ÇÑ„ÄåÊÄ™Áâ©„Äç„ÄåÂ∏ùÁéã„Äç„ÄåÈâÑ‰∫∫„Äç„Å™„Å©„Ç≠„É£„ÉÉ„ÉÅ„Éº„Å™„ÉØ„Éº„Éâ„ÇíÊ¥ªÁî®„ÄÇ
  * „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„ÇÑ #shorts „ÅØÁµ∂ÂØæ„Å´ÂÖ•„Çå„Å™„ÅÑ„ÄÇ
 - „ÄåthumbnailTitle„Äç„ÅØ„Çµ„É†„ÉçÁî®„ÅÆ12„Äú18ÊñáÂ≠óÁ®ãÂ∫¶„ÅÆÁü≠„ÅÑÁÖΩ„Çä„Ç≥„Éî„Éº„ÄÇÂÖ®Ëßí„ÅßË™≠„Åø„ÇÑ„Åô„Åè„ÄÅÊúÄÂ§ß8Ë™û‰ª•ÂÜÖ„ÄÇ‰∫∫Áâ©„ÅÆË±°Âæ¥ÁöÑ„Å™Ë®ÄËëâ„ÇÑÊïôË®ì„Å®„Å§„Å™„Åå„ÇãÂÜÖÂÆπ„Å´„Åó„ÄÅÂèØËÉΩ„Åß„ÅÇ„Çå„Å∞ÂçäËßíÊï∞Â≠ó„ÇíÂê´„ÇÅ„Çã„ÄÇ
- „Äåsummary„Äç„ÅØ3Êñá‰ª•ÂÜÖ„Åß„ÄÅ‰∫∫Áâ©„ÅÆÂÆüÁ∏æ„ÇÑÊ†ºË®Ä„ÅåÁèæ‰ª£„Éì„Ç∏„Éç„Çπ„Å´‰∏é„Åà„ÇãÁ§∫ÂîÜ„ÇíÁ¥π‰ªã„ÄÇ
- „Äåhook„Äç„ÅØÂãïÁîªÂÜíÈ†≠„ÅßË¶ñËÅ¥ËÄÖ„ÇíÊÉπ„Åç„Å§„Åë„Çã„Éë„É≥„ÉÅ„É©„Ç§„É≥„ÄÇ
- „ÄåthumbnailIdea„Äç„ÅØ„Çµ„É†„Éç„Ç§„É´„Éá„Ç∂„Ç§„É≥„ÇíËÄÉ„Åà„Çã„ÅÜ„Åà„Åß„ÅÆË£úË∂≥„É°„É¢ÔºàÈÖçËâ≤„ÉªÊßãÂõ≥„ÉªÈÖçÁΩÆ„Å™„Å©Ôºâ„ÄÇ
- „Äåtags„Äç„ÅØ„ÉÜ„Éº„Éû„Å´Ê≤ø„Å£„ÅüÁü≠„ÅÑÊó•Êú¨Ë™û„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÈÖçÂàó„Åß„ÄÇ
- „ÄåsourceHints„Äç„ÅØ‰ø°È†º„Åß„Åç„ÇãÊõ∏Á±ç„ÉªÊºîË™¨„ÉªË´ñÊñá„Å™„Å©ÂêçË®Ä„ÅÆÂá∫ÂÖ∏„ÇíÁ§∫„Åô„ÇÇ„ÅÆ„ÄÇ
- „Äånotes„Äç„Å´„ÅØÊâ±„ÅÜÈöõ„ÅÆÊ≥®ÊÑèÁÇπ„ÇÑË£úË∂≥„ÄÇ

Êó¢Â≠ò„ÅÆ‰∫∫Áâ©„Å®ÈáçË§á„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„ÄÅÁ¶ÅÊ≠¢„É™„Çπ„ÉàÔºàforbidNamesÔºâ„Å´Âê´„Åæ„Çå„ÇãÂêçÂâç„ÅØÁµ∂ÂØæ„Å´ÈÅ∏„Å∞„Å™„ÅÑ„Åì„Å®„ÄÇ
Âá∫Âäõ„ÅØUTF-8„ÅÆJSON„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÂçò‰Ωì„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂâçÂæå„Å´‰ΩôË®à„Å™„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•„Çå„Å™„ÅÑ„Åì„Å®„ÄÇ

ÂèÇËÄÉÊù°‰ª∂:
${userIntent || "Áâπ„Å´„Å™„Åó"}
`.trim();

  const forbiddenNames = new Set(
    (payload.forbidNames ?? []).map((name) => normalizeName(name)),
  );

  let lastError: Error | null = null;

  for (let attempt = 0; attempt < 3; attempt += 1) {
    const completion = await openaiClient.chat.completions.create({
      model: env.OPENAI_MODEL,
      temperature: env.OPENAI_TEMPERATURE,
      response_format: { type: "json_object" },
      messages: [
        {
          role: "system",
          content:
            "You are an expert producer for a Japanese short-form video channel featuring historical figures. Always respond with pure JSON that matches the requested schema.",
        },
        {
          role: "user",
          content: instruction,
        },
      ],
    });

    const message = completion.choices[0]?.message?.content;
    if (!message) {
      lastError = new Error("Failed to receive proposal content from OpenAI");
      continue;
    }

    let parsed: unknown;
    try {
      parsed = JSON.parse(message);
    } catch (error) {
      lastError = new Error(`OpenAI response was not valid JSON: ${error}`);
      continue;
    }

    const proposal = aiProposalSchema.safeParse(parsed);
    if (!proposal.success) {
      lastError = new Error(
        `AI response did not match schema: ${proposal.error.message}`,
      );
      continue;
    }

    if (forbiddenNames.has(normalizeName(proposal.data.name))) {
      lastError = new Error(
        `Á¶ÅÊ≠¢ÂØæË±°„ÅÆ‰∫∫Áâ©„Äå${proposal.data.name}„Äç„ÅåÈÅ∏„Å∞„Çå„Åæ„Åó„Åü„ÄÇÂÜçË©¶Ë°å„Åó„Åæ„Åô„ÄÇ`,
      );
      continue;
    }

    const { name, youtubeTitle } = proposal.data;
    const normalizedTitle = youtubeTitle.trim();

    if (!normalizedTitle.startsWith(`„Äê${name}„Å´Â≠¶„Å∂„Äë`)) {
      lastError = new Error(
        `„Çø„Ç§„Éà„É´„ÅåÊåáÂÆö„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÇíÊ∫Ä„Åü„Åó„Åæ„Åõ„Çì: ${youtubeTitle}`,
      );
      continue;
    }

    if (!/[0-9Ôºê-Ôºô]/.test(normalizedTitle)) {
      lastError = new Error(
        `„Çø„Ç§„Éà„É´„Å´Êï∞Â≠ó„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì: ${youtubeTitle}`,
      );
      continue;
    }

    return proposal.data;
  }

  throw lastError ?? new Error("Failed to generate a unique figure proposal");
}
